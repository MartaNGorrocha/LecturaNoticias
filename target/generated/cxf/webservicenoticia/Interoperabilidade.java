package webservicenoticia;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.4.3
 * 2021-05-19T13:26:31.152+02:00
 * Generated source version: 3.4.3
 *
 */
@WebServiceClient(name = "Interoperabilidade",
                  wsdlLocation = "https://esb.xunta.local/services/proxyRespeFamilias?wsdl",
                  targetNamespace = "http://webservicenoticia")
public class Interoperabilidade extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservicenoticia", "Interoperabilidade");
    public final static QName InteroperabilidadeHttpSoap12Endpoint = new QName("http://webservicenoticia", "InteroperabilidadeHttpSoap12Endpoint");
    public final static QName InteroperabilidadeHttpEndpoint = new QName("http://webservicenoticia", "InteroperabilidadeHttpEndpoint");
    public final static QName InteroperabilidadeHttpSoap11Endpoint = new QName("http://webservicenoticia", "InteroperabilidadeHttpSoap11Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("https://esb.xunta.local/services/proxyRespeFamilias?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Interoperabilidade.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "https://esb.xunta.local/services/proxyRespeFamilias?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Interoperabilidade(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Interoperabilidade(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Interoperabilidade() {
        super(WSDL_LOCATION, SERVICE);
    }

    public Interoperabilidade(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Interoperabilidade(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Interoperabilidade(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns InteroperabilidadePortType
     */
    @WebEndpoint(name = "InteroperabilidadeHttpSoap12Endpoint")
    public InteroperabilidadePortType getInteroperabilidadeHttpSoap12Endpoint() {
        return super.getPort(InteroperabilidadeHttpSoap12Endpoint, InteroperabilidadePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InteroperabilidadePortType
     */
    @WebEndpoint(name = "InteroperabilidadeHttpSoap12Endpoint")
    public InteroperabilidadePortType getInteroperabilidadeHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(InteroperabilidadeHttpSoap12Endpoint, InteroperabilidadePortType.class, features);
    }


    /**
     *
     * @return
     *     returns InteroperabilidadePortType
     */
    @WebEndpoint(name = "InteroperabilidadeHttpEndpoint")
    public InteroperabilidadePortType getInteroperabilidadeHttpEndpoint() {
        return super.getPort(InteroperabilidadeHttpEndpoint, InteroperabilidadePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InteroperabilidadePortType
     */
    @WebEndpoint(name = "InteroperabilidadeHttpEndpoint")
    public InteroperabilidadePortType getInteroperabilidadeHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(InteroperabilidadeHttpEndpoint, InteroperabilidadePortType.class, features);
    }


    /**
     *
     * @return
     *     returns InteroperabilidadePortType
     */
    @WebEndpoint(name = "InteroperabilidadeHttpSoap11Endpoint")
    public InteroperabilidadePortType getInteroperabilidadeHttpSoap11Endpoint() {
        return super.getPort(InteroperabilidadeHttpSoap11Endpoint, InteroperabilidadePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InteroperabilidadePortType
     */
    @WebEndpoint(name = "InteroperabilidadeHttpSoap11Endpoint")
    public InteroperabilidadePortType getInteroperabilidadeHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(InteroperabilidadeHttpSoap11Endpoint, InteroperabilidadePortType.class, features);
    }

}
